# LocalStack Web - Makefile
# Comandos para facilitar o desenvolvimento e deployment

.PHONY: help install dev build preview lint format clean
.PHONY: docker-build docker-run docker-stop docker-logs docker-clean
.PHONY: localstack-start localstack-stop localstack-status localstack-logs localstack-reset
.PHONY: sample-data setup-dev setup-prod test health check-deps
.DEFAULT_GOAL := help

# Vari√°veis
DOCKER_IMAGE_NAME = localstack-web
DOCKER_CONTAINER_NAME = localstack-web-container
LOCALSTACK_ENDPOINT = http://localhost:4566
APP_PORT = 3000

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## üìã Mostra este menu de ajuda
	@echo "$(BLUE)LocalStack Web - Comandos Dispon√≠veis$(NC)"
	@echo "=================================================="
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Exemplos de uso:$(NC)"
	@echo "  make setup-dev     # Setup completo para desenvolvimento"
	@echo "  make dev           # Inicia aplica√ß√£o em modo desenvolvimento"
	@echo "  make sample-data   # Cria dados de exemplo no LocalStack"
	@echo "  make docker-build  # Build da imagem Docker"

# ==================================================
# üì¶ COMANDOS DE DESENVOLVIMENTO
# ==================================================

check-deps: ## üîç Verifica se todas as depend√™ncias est√£o instaladas
	@echo "$(BLUE)Verificando depend√™ncias...$(NC)"
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå Node.js n√£o est√° instalado$(NC)"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "$(RED)‚ùå npm n√£o est√° instalado$(NC)"; exit 1; }
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker n√£o est√° instalado$(NC)"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "$(RED)‚ùå Docker Compose n√£o est√° instalado$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Todas as depend√™ncias est√£o instaladas!$(NC)"

install: check-deps ## üì¶ Instala as depend√™ncias do projeto
	@echo "$(BLUE)Instalando depend√™ncias...$(NC)"
	npm install
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas com sucesso!$(NC)"

setup-dev: check-deps install localstack-start ## üöÄ Setup completo para desenvolvimento
	@echo "$(BLUE)Configurando ambiente de desenvolvimento...$(NC)"
	@echo "$(GREEN)‚úÖ Setup completo! Use 'make dev' para iniciar a aplica√ß√£o$(NC)"
	@echo "$(YELLOW)üìã Comandos √∫teis:$(NC)"
	@echo "  make dev           - Inicia aplica√ß√£o"
	@echo "  make sample-data   - Cria dados de exemplo"
	@echo "  make health        - Verifica status dos servi√ßos"

dev: ## üîß Inicia a aplica√ß√£o em modo desenvolvimento
	@echo "$(BLUE)Iniciando aplica√ß√£o em modo desenvolvimento...$(NC)"
	@echo "$(YELLOW)üì± Aplica√ß√£o ser√° aberta em: http://localhost:$(APP_PORT)$(NC)"
	npm run dev

build: ## üèóÔ∏è Gera build de produ√ß√£o
	@echo "$(BLUE)Gerando build de produ√ß√£o...$(NC)"
	npm run build
	@echo "$(GREEN)‚úÖ Build gerado em ./dist$(NC)"

preview: build ## üëÄ Preview da build de produ√ß√£o
	@echo "$(BLUE)Iniciando preview da build...$(NC)"
	npm run preview

lint: ## üîç Executa linting do c√≥digo
	@echo "$(BLUE)Executando linting...$(NC)"
	npm run lint

format: ## üé® Formata o c√≥digo
	@echo "$(BLUE)Formatando c√≥digo...$(NC)"
	npm run format
	@echo "$(GREEN)‚úÖ C√≥digo formatado!$(NC)"

clean: ## üßπ Limpa arquivos de build e cache
	@echo "$(BLUE)Limpando arquivos tempor√°rios...$(NC)"
	rm -rf dist/
	rm -rf node_modules/.cache/
	npm cache clean --force
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

test: ## üß™ Executa testes (placeholder)
	@echo "$(YELLOW)‚ö†Ô∏è Testes ainda n√£o implementados$(NC)"

# ==================================================
# üê≥ COMANDOS DOCKER
# ==================================================

docker-build: ## üê≥ Build da imagem Docker
	@echo "$(BLUE)Construindo imagem Docker...$(NC)"
	docker build -t $(DOCKER_IMAGE_NAME) .
	@echo "$(GREEN)‚úÖ Imagem $(DOCKER_IMAGE_NAME) criada!$(NC)"

docker-run: docker-build ## üöÄ Executa a aplica√ß√£o em container Docker
	@echo "$(BLUE)Executando aplica√ß√£o em container...$(NC)"
	docker run -d --name $(DOCKER_CONTAINER_NAME) -p $(APP_PORT):80 $(DOCKER_IMAGE_NAME)
	@echo "$(GREEN)‚úÖ Container iniciado! Acesse: http://localhost:$(APP_PORT)$(NC)"

docker-stop: ## ‚èπÔ∏è Para o container Docker
	@echo "$(BLUE)Parando container...$(NC)"
	-docker stop $(DOCKER_CONTAINER_NAME)
	-docker rm $(DOCKER_CONTAINER_NAME)
	@echo "$(GREEN)‚úÖ Container parado!$(NC)"

docker-logs: ## üìã Mostra logs do container Docker
	@echo "$(BLUE)Logs do container:$(NC)"
	docker logs -f $(DOCKER_CONTAINER_NAME)

docker-clean: docker-stop ## üßπ Remove containers e imagens Docker
	@echo "$(BLUE)Limpando recursos Docker...$(NC)"
	-docker rmi $(DOCKER_IMAGE_NAME)
	-docker system prune -f
	@echo "$(GREEN)‚úÖ Recursos Docker removidos!$(NC)"

# ==================================================
# üîß COMANDOS LOCALSTACK
# ==================================================

localstack-start: ## üü¢ Inicia o LocalStack
	@echo "$(BLUE)Iniciando LocalStack...$(NC)"
	docker-compose -f docker-compose.dev.yml up -d
	@echo "$(YELLOW)‚è≥ Aguardando LocalStack inicializar...$(NC)"
	@sleep 5
	@$(MAKE) localstack-status

localstack-stop: ## üî¥ Para o LocalStack
	@echo "$(BLUE)Parando LocalStack...$(NC)"
	docker-compose -f docker-compose.dev.yml down
	@echo "$(GREEN)‚úÖ LocalStack parado!$(NC)"

localstack-status: ## üìä Verifica status do LocalStack
	@echo "$(BLUE)Verificando status do LocalStack...$(NC)"
	@if curl -s $(LOCALSTACK_ENDPOINT)/_localstack/health >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ LocalStack est√° rodando em $(LOCALSTACK_ENDPOINT)$(NC)"; \
		curl -s $(LOCALSTACK_ENDPOINT)/_localstack/health | python3 -m json.tool 2>/dev/null || echo ""; \
	else \
		echo "$(RED)‚ùå LocalStack n√£o est√° respondendo$(NC)"; \
		echo "$(YELLOW)üí° Use 'make localstack-start' para iniciar$(NC)"; \
	fi

localstack-logs: ## üìã Mostra logs do LocalStack
	@echo "$(BLUE)Logs do LocalStack:$(NC)"
	docker-compose -f docker-compose.dev.yml logs -f

localstack-reset: ## üîÑ Reseta dados do LocalStack
	@echo "$(BLUE)Resetando dados do LocalStack...$(NC)"
	$(MAKE) localstack-stop
	rm -rf localstack-data/
	@echo "$(GREEN)‚úÖ Dados resetados!$(NC)"
	@echo "$(YELLOW)üí° Use 'make localstack-start' para reiniciar$(NC)"

# ==================================================
# üìä COMANDOS DE DADOS E TESTES
# ==================================================

sample-data: ## üéØ Cria dados de exemplo no LocalStack
	@echo "$(BLUE)Criando dados de exemplo...$(NC)"
	@if curl -s $(LOCALSTACK_ENDPOINT)/_localstack/health >/dev/null 2>&1; then \
		chmod +x create-sample-data.sh && ./create-sample-data.sh; \
		echo "$(GREEN)‚úÖ Dados de exemplo criados!$(NC)"; \
	else \
		echo "$(RED)‚ùå LocalStack n√£o est√° rodando$(NC)"; \
		echo "$(YELLOW)üí° Use 'make localstack-start' primeiro$(NC)"; \
	fi

health: ## üè• Verifica sa√∫de de todos os servi√ßos
	@echo "$(BLUE)Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo ""
	@echo "$(YELLOW)üîß LocalStack:$(NC)"
	@$(MAKE) localstack-status
	@echo ""
	@echo "$(YELLOW)üì± Aplica√ß√£o Web:$(NC)"
	@if curl -s http://localhost:$(APP_PORT) >/dev/null 2>&1; then \
		echo "$(GREEN)‚úÖ Aplica√ß√£o web est√° rodando em http://localhost:$(APP_PORT)$(NC)"; \
	else \
		echo "$(RED)‚ùå Aplica√ß√£o web n√£o est√° respondendo$(NC)"; \
		echo "$(YELLOW)üí° Use 'make dev' para iniciar$(NC)"; \
	fi

# ==================================================
# üèóÔ∏è COMANDOS DE PRODU√á√ÉO
# ==================================================

setup-prod: ## üè≠ Setup para produ√ß√£o com Docker Compose
	@echo "$(BLUE)Configurando ambiente de produ√ß√£o...$(NC)"
	docker-compose up --build -d
	@echo "$(GREEN)‚úÖ Ambiente de produ√ß√£o iniciado!$(NC)"
	@echo "$(YELLOW)üì± Acesse: http://localhost:$(APP_PORT)$(NC)"
	@echo "$(YELLOW)üîß LocalStack: $(LOCALSTACK_ENDPOINT)$(NC)"

prod-stop: ## ‚èπÔ∏è Para ambiente de produ√ß√£o
	@echo "$(BLUE)Parando ambiente de produ√ß√£o...$(NC)"
	docker-compose down
	@echo "$(GREEN)‚úÖ Ambiente de produ√ß√£o parado!$(NC)"

prod-logs: ## üìã Mostra logs do ambiente de produ√ß√£o
	@echo "$(BLUE)Logs do ambiente de produ√ß√£o:$(NC)"
	docker-compose logs -f

# ==================================================
# üîß COMANDOS UTILIT√ÅRIOS
# ==================================================

urls: ## üåê Mostra URLs importantes
	@echo "$(BLUE)URLs importantes:$(NC)"
	@echo "$(GREEN)üì± Aplica√ß√£o Web:$(NC)     http://localhost:$(APP_PORT)"
	@echo "$(GREEN)üîß LocalStack:$(NC)        $(LOCALSTACK_ENDPOINT)"
	@echo "$(GREEN)üè• Health Check:$(NC)      $(LOCALSTACK_ENDPOINT)/_localstack/health"
	@echo "$(GREEN)üìä LocalStack UI:$(NC)     https://app.localstack.cloud (se configurado)"

ports: ## üîå Mostra portas utilizadas
	@echo "$(BLUE)Portas utilizadas:$(NC)"
	@echo "$(GREEN)3000$(NC) - Aplica√ß√£o Web Frontend"
	@echo "$(GREEN)4566$(NC) - LocalStack Gateway"
	@echo "$(GREEN)80$(NC)   - Nginx (container produ√ß√£o)"

env: ## üìã Mostra informa√ß√µes do ambiente
	@echo "$(BLUE)Informa√ß√µes do ambiente:$(NC)"
	@echo "$(GREEN)Node.js:$(NC) $$(node --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "$(GREEN)npm:$(NC) $$(npm --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "$(GREEN)Docker:$(NC) $$(docker --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "$(GREEN)Docker Compose:$(NC) $$(docker-compose --version 2>/dev/null || echo 'N√£o instalado')"
	@echo "$(GREEN)Sistema:$(NC) $$(uname -s)"

# ==================================================
# üö® COMANDOS DE EMERGENCY
# ==================================================

emergency-reset: ## üö® Reset completo (use apenas em emerg√™ncia)
	@echo "$(RED)‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° remover TODOS os dados e containers!$(NC)"
	@read -p "Tem certeza? (yes/no): " confirm && [ "$$confirm" = "yes" ] || exit 1
	@echo "$(BLUE)Executando reset completo...$(NC)"
	-docker-compose down --volumes --remove-orphans
	-docker-compose -f docker-compose.dev.yml down --volumes --remove-orphans
	-docker stop $(DOCKER_CONTAINER_NAME) && docker rm $(DOCKER_CONTAINER_NAME)
	-docker rmi $(DOCKER_IMAGE_NAME)
	rm -rf node_modules/ dist/ localstack-data/
	@echo "$(GREEN)‚úÖ Reset completo executado!$(NC)"
	@echo "$(YELLOW)üí° Use 'make setup-dev' para reconfigurar$(NC)"

kill-ports: ## üíÄ Mata processos nas portas utilizadas
	@echo "$(BLUE)Liberando portas utilizadas...$(NC)"
	-lsof -ti:$(APP_PORT) | xargs kill -9 2>/dev/null || true
	-lsof -ti:4566 | xargs kill -9 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Portas liberadas!$(NC)"
